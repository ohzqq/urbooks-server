
xml = Nokogiri::XML::Builder.new do |xml|
  url = lib[@library].web["url"]
  xml.feed(
    version: "2.0",
    "xmlns:atom" => "http://www.w3.org/2005/Atom",
    "xmlns:dc" => "http://purl.org/dc/terms/",
    "xmlns:odps" => "http://opds-spec.org/2010/catalog",
    "xmlns:xhtml" => "http://www.w3.org/1999/xhtml"
  ) {
    xml.link(
      rel: "search",
      type: "application/atom+xml",
      title: "Search",
      href: url("/odps/#{@library}/books?q={searchTerms}")
    )
    xml.link(
      rel: "start",
      href: url("/odps"),
      type: "application/atom+xml;profile=opds-catalog;kind=navigation"
    )
    xml.link(
      rel: "up",
      href: url("/odps/#{@library}"),
      type: "application/atom+xml;profile=opds-catalog;kind=navigation"
    )
    xml.link(
      rel: "first",
      href: url("/odps/#{@library}"),
      type: "application/atom+xml;profile=opds-catalog;kind=navigation"
    )
    xml.link(
      rel: "last",
      href: url("/odps/#{@library}/#{@sort}?page=#{@pagy.last}"),
      type: "application/atom+xml;profile=opds-catalog;kind=navigation"
    )
    prev = @pagy.prev.nil? ? "" : "?page=#{@pagy.prev}"
    xml.link(
      rel: "prev",
      href: url("/odps/#{@library}/#{@sort}#{prev}"),
      type: "application/atom+xml;profile=opds-catalog;kind=navigation"
    )
    xml.link(
      rel: "next",
      href: url("/odps/#{@library}/#{@sort}?page=#{@pagy.next}"),
      type: "application/atom+xml;profile=opds-catalog;kind=navigation"
    )
    xml.title("URbooks")
    xml.author {
      xml.name("URbooks")
      xml.uri(@url)
    }
    xml.updated(Time.now)

    book_meta(@books.map(:id), @library).each do |book|

      formats = book.formats.map {|f| f[:format]}.join(", ")
      description = '<p class="description">'
      description << "Series: #{book.series.first[:value]} [#{book.series_index}]<br/>" unless book.series.nil?
      description << <<~HTML
        Tags: #{book.join_tags}<br/>
        Formats: #{formats}
          #{book.comments}
        </p>
      HTML

      xml.entry {
        xml.title(book.title)
        xml.author{
          xml.name(book.join_names(:authors))
          xml.uri(url("/"))
        }
        xml.id_(book.id)
        xml.updated(book.last_modified)
        xml.published(book.pubdate)
        xml.content(description, type: 'xhtml') # {
          #xml.div['xhtml'](description)
        #}
        xml.link(
          type: "image/jpeg",
          href: cover_link(@library, book),
          rel: "http://opds-spec.org/cover"
        )
        book.formats.each do |format|
          xml.link(
            type: "application/epub+zip",
            href: download_link(@library, book),
            rel: "http://opds-spec.org/acquisition"
          )
        end
      }
    end

  }
end
xml.to_xml
